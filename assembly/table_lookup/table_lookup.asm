; Executable name : table_lookup
; Version         : 1.0
; Created date    : 12/16/2011
; Last update     : 12/16/2011
; Author          : Matthew Hoggan
; Description     : A simple program in NASM assembly languate for Linux, using NASM 2.05,
;                   demonstrating the use of the XLAT instruction to alter text streams.
;
; Build using these commands:
;   nasm -f elf -g -F stab table_lookup.asm
;   ld -o table_lookup table_lookup.o
;

SECTION .data                                                                  ; Section containing initialized data
  StatMsg: db "Processing...",0x0A
  StatLen: equ $-StatMsg
  DoneMsg: db "...Finished!",0x0A
  DoneLen: equ $-DoneMsg

; The following translation table translates all lowercase characters to
; uppercase. It also translates all non-printable characters to spaces,
; except for LF and RT
  UpCase:
  db 0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x09,0x0A,0x20,0x20,0x20,0x20,0x20
  db 0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
  db 0x20,0x21,0x22,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2A,0x2B,0x2C,0x2D,0x2E,0x2F
  db 0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x3A,0x3B,0x3C,0x3D,0x3E,0x3F
  db 0x40,0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4A,0x4B,0x4C,0x4D,0x4E,0x4F
  db 0x50,0x51,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5A,0x5B,0x5C,0x5D,0x5E,0x5F
  db 0x60,0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4A,0x4B,0x4C,0x4D,0x4E,0x4F
  db 0x50,0x51,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5A,0x7B,0x7C,0x7D,0x7E,0x20
  db 0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
  db 0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
  db 0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
  db 0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
  db 0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
  db 0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
  db 0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
  db 0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20

; The following translation table is "stock" in that it translates all 
; printable characters as themselves, and converts all non-printable
; characters to spaces except for LF and HT. You can modify this to 
; translate anything you want to any character you want
  Custom:
  db 0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x09,0x0A,0x20,0x20,0x20,0x20,0x20
  db 0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
  db 0x20,0x21,0x22,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2A,0x2B,0x2C,0x2D,0x2E,0x2F
  db 0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x3A,0x3B,0x3C,0x3D,0x3E,0x3F
  db 0x40,0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4A,0x4B,0x4C,0x4D,0x4E,0x4F
  db 0x50,0x51,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5A,0x5B,0x5C,0x5D,0x5E,0x5F
  db 0x60,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6A,0x6B,0x6C,0x6D,0x6E,0x6F
  db 0x70,0x71,0x72,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7A,0x7B,0x7C,0x7D,0x7E,0x20
  db 0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
  db 0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
  db 0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
  db 0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
  db 0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
  db 0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
  db 0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
  db 0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20

  STD_INP: equ 0x00
  EOF    : equ 0x00
  SYS_EXT: equ 0x01
  STD_OUT: equ 0x01
  STD_ERR: equ 0x02
  SYS_RED: equ 0x03
  SYS_WRT: equ 0x04
  CAL_GAT: equ 0x80
  
SECTION .bss                                                                   ; Section containing uninitialized data
  ReadBuffer: resb READLEN                                                     ; Text buffer itself
  READLEN equ 1024                                                             ; Length of buffer

SECTION .txt                                                                   ; Section containing code
  global _start                                                                ; Linker needs this to find the entry point!
  
  _start:
    nop                                                                        ; gdb
  
  ; Display the "I'm working..." message via stderr:
    mov eax, SYS_WRT                                                           ; Specify sys_write call
    mov ebx, STD_ERR                                                           ; Specify File Descriptor 2: Standard error
    mov ecx, StatMsg                                                           ; Pass offset of the message
    mov edx, StatLen                                                           ; Pass the length of the message
    int CAL_GAT                                                                ; Make kernel call
    
  ; Read a buffer full of text from stdin:
  Read:
    mov eax, SYS_RED                                                           ; Specify sys_read call
    mov ebx, STD_INP                                                           ; Specify file descriptor 0 = stdin
    mov ecx, ReadBuffer                                                        ; Pass offset of the buffer to read to
    mov edx, READLEN                                                           ; Pass number of bytes to read at one pass
    int CAL_GAT                                                                ; Make kernel call
    mov ebp, eax                                                               ; Copy sys_read return value for safekeeping
    cmp eax, EOF                                                               ; If eax == 0, sys_read reached EOF
    je Done                                                                    ; If eax == 0, DONE!!!

  ; Set up the registers for the translate step:
    mov ebx, UpCase                                                            ; Place the offset of the table into ebx
    mov edx, ReadBuffer                                                        ; Place the offset of the buffer into edx
    mov ecx, ebp                                                               ; Place the number of bytes in the buffer into ecx

  ; Use the xlat instruction to tranlate the data in the buffer:
  ; (Note: the commented out instructions do the same work at XLAT;
  ; un-comment them and then comment out XLAT to try it!!!
  Translate:
  ; xor eax, eax                                                               ; Clear hight 24 bits of eax
    mov al, byte[edx+ecx]                                                      ; Load character into AL for translation
  ; mov al, byte[UpCase+eax]                                                   ; Translate character in AL via table
    xlat                                                                       ; Translate character in AL via table
    mov byte[edx+ecx], al                                                      ; Put the translated char back in the buffer
    dec ecx                                                                    ; Decrement the character count
    jnz Translate

  ; Write the buffer full of tranlate text to stdout:
  Write:
    mov eax, SYS_WRT                                                           ; Specify sys_write call
    mov ebx, STD_OUT                                                           ; Specify file descriptor 1 = stdout
    mov ecx, ReadBuffer                                                        ; Pass offset of the buffer
    mov edx, ebp                                                               ; Pass the # of bytes of data in the buffer
    int CAL_GAT                                                                ; Make kernel call
    jmp Read                                                                   ; Loop back and load another buffer full

  ; Display the "I'm done" message via stderr:
  Done:
    mov eax, SYS_WRT                                                           ; Specify sys_write call
    mov ebx, STD_ERR                                                           ; Specify file descriptor 2: stderr
    mov ecx, DoneMsg                                                           ; Pass offset of the message
    mov edx, DoneLen                                                           ; Pass the length of the message
    int CAL_GAT                                                                ; Make kernel call

  ; All done! Let's end this party:
    mov eax, SYS_EXT                                                           ; Code for sys_exit call
    mov ebx, 0x00                                                              ; Return code of zero specifying normal exit code
    int CAL_GAT                                                                ; Make final kernel call























